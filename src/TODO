v0.8
/- osd recovery fixes
/- backup homiebackup5
/- backup backup.
/- bug fixes?
/- mount error reporting
/- fix mds file size/mtime recovery
/- changes for 2.6.30
/- mds cap fixes
/- crush fixes

v0.9
/- make mds exhert memory pressure on client caps, leases
/- librados
/  - async io
/  - list_objects
/  - rados
/    - --snap N
/    - fetch/store/remove object
/    - list objects
/    - list pools
/- object classes
/- crush bugfixes
/- kclient readdir fixes

v0.10
/- kclient
/  - fix unaligned memory access
/  - fix op replay after mds restart (symlink ops)
/- fix rados snaps vs 'ls'
/- improved monitor read model
/- osd bugfixes

v0.11
(andi)
/- server-specified max file size
/- simplified pr_debug macro
/- more comments
/- added a few missing '__attribute__ ((packed))'
/- kcalloc throughout (chris wright)
/- simplified export.c (jbfields)
/- cleaned up mount code
/- kmem_cache for dentry_info
/- EBADF on bad caps
/- fixed stray unaligned access
/- respond to control-c on slow/hung mount

v0.12
- mapping_set_error on failed writepage
- document correct debugfs mount point
- simplify layout/striping ioctls
- removed bad kmalloc in writepages
- use mempools for writeback allocations where appropriate (*)
- fixed a problem with capability, snap metadata writeback
- cleaned up f(data)sync wrt metadata writeback

v0.13
/- osd active during backlog generation
/- osdmap: allow explicit pg 'override' mappings
/- kclient: fixed vmalloc() usage (use for incoming msgs, GFP_NOFS)
/- http gw
- client authentication
/- kclient: fix sync read vs EOF
/- uclient: fix sync read vs EOF
- uclient: fix write vs max_size
/- [uk]client lseek SEEK_END

bugs
- premature filejournal trimming?
- weird osd_lock contention during osd restart?
- cap revoke/issue race......
                                         2=pAsxLsXsxF  rw/pAsxXsxFsxwb@4
  m->c revoke ino 10000000000 7 seq 5 caps=pAsxLsXsxF  r
  m->c revoke ino 10000000000 7 seq 6 caps=pAs LsXsxF  r
  m->c  grant ino 10000000000 7 seq 7 caps=pAs LsXsxFscr
                                         2=pAsxLsXsxFscrw/pAsxXsxFsxwb@7
  m->c revoke ino 10000000000 7 seq 8 caps=pAs LsXsxF  r
  m<-c update ino 10000000000 7 seq 5 caps=pAsxLsXsxF  r
                                         2=pAsxLsXsxFscrw/pAsxXsxFsxwb@8
  m->c  grant ino 10000000000 7 seq 9 caps=pAs LsXsxF  rw
  m<-c revoke ino 10000000000 7 seq 6 caps=pAs LsXsxF  r
                                         2=pAsxLsXsxFscrw/pAsxXsxFsxwb@9
  m<-c revoke ino 10000000000 7 seq 8 caps=pAs LsXsxF  r
      ... mds thinks client has          2=pAsxLsXsxFscrw/pAsxXsxFsxwb@9



later
- authentication
- client reconnect after long eviction; and slow delayed reconnect
- ENOSPC
  - space reservation in ObjectStore, redeemed by Transactions?
  - reserved as PG goes active; reservation canceled when pg goes inactive
  - something similar during recovery
  - ?
- repair
- mds security enforcement
- client, user authentication
- cas
- osd failure declarations
- rename over old files should flush data, or revert back to old contents

rados
- usage accounting
- make rest interface superset of s3?
- perl swig wrapper
- 'rados call foo.bar'?
- merge pgs
- destroy pg_pools
- autosize pg_pools?
- security

repair
- repair metadata.. 
/  - parent pointer on CDir objects
  - update on dir rename commit
- namespace reconstruction tool
- repair pg (rebuild log)  (online or offline?  ./cosd --repair_pg 1.ef?)
- repair file ioctl?
- are we concerned about
  - scrubbing
  - reconstruction after loss of subset of cdirs
  - reconstruction after loss of md log
- data object 
  - path backpointers?
  - parent dir pointer?
- cdir objects
  - parent dir pointer
    - update on rename?  or on cdir store?
      on cdir store is sufficient if mdlog survives...
  - or what the hell, full trace?
- mds scrubbing

kclient
- fix llseek SEEK_END .. if !FILE_SHARED, we need to stat the inode
?- ensure cap_snaps reflush after client reconnect 
- fix up ESTALE handling
- make cap import/export efficient
- flock, fnctl locks
- ACLs
- should we try to ref CAP_PIN on special inodes that are open?  
- fix readdir vs fragment race by keeping a separate frag pos, and ignoring dentries below it
- reconnect after being disconnected from the mds
- inotify for updates from other clients?

vfs issues
- real_lookup() race:
  1- hash lookup find no dentry
  2- real_lookup() takes dir i_mutex, but then finds a dentry
  3- drops mutex, then calld d_revalidate.  if that fails, we return ENOENT (instead of looping?)
- vfs_rename_dir()
- a getattr mask would be really nice

filestore
- make min sync interval self-tuning (ala xfs, ext3?)
- get file csum?

btrfs
- clone compressed inline extents
- ioctl to pull out data csum?

osd
- remove needs to be in a work queue!
- what to do with lost objects.. continue peering?
- segregate backlog from log ondisk?
- preserve pg logs on disk for longer period
- make scrub interruptible
- optionally separate osd interfaces (ips) for clients and osds (replication, peering, etc.)
- pg repair
- pg split should be a work queue
- optimize remove wrt recovery pushes?

uclient
- clean up check_caps to more closely mirror kclient logic
- audit max_size logic (see the kclient wrapper)
- readdir from cache
- clean up client mds session vs mdsmap behavior?
- fix readdir vs fragment race by keeping a separate frag pos, and ignoring dentries below it
- hadoop: clean up assert usage

mds
- add an up:shadow mode?
  - tail the mds log as it is written
  - periodically check head so that we trim, too
- handle slow client reconnect (i.e. after mds has gone active)
- anchor_destroy needs to xlock linklock.. which means it needs a Mutation wrapper?
  - ... when it gets a caller.. someday..
- add FILE_CAP_EXTEND capability bit
- dir fragment
  - maybe just take dftlock for now, to keep it simple.
- dir merge
- snap
  - hard link backpointers
    - anchor source dir
    - build snaprealm for any hardlinked file
    - include snaps for all (primary+remote) parents
  - how do we properly clean up inodes when doing a snap purge?
    - when they are mid-recover?  see 136470cf7ca876febf68a2b0610fa3bb77ad3532
  - what if a recovery is queued, or in progress, and the inode is then cowed?  can that happen?  
  - proper handling of cache expire messages during rejoin phase?
    -> i think cache expires are fine; the rejoin_ack handler just has to behave if rejoining items go missing

- clustered
  - on replay, but dirty scatter replicas on lists so that they get flushed?  or does rejoin handle that?
  - linkage vs cdentry replicas and remote rename....
  - rename: importing inode... also journal imported client map?

mon
- mds injectargs N should take mds# or id.  * should bcast to standy mds's.
- paxos need to clean up old states.
  - default: simple max of (state count, min age), so that we have at least N hours of history, say?
  - osd map: trim only old maps < oldest "in" osd up_from

osdmon
- monitor needs to monitor some osds...

pgmon
/- include osd vector with pg state
  - check for orphan pgs
- monitor pg states, notify on out?
- watch osd utilization; adjust overload in cluster map

crush
- allow forcefeed for more complicated rule structures.  (e.g. make force_stack a list< set<int> >)

simplemessenger
- close idle connections?

objectcacher
- read locks?
- maintain more explicit inode grouping instead of wonky hashes

cas
- chunking.  see TTTD in
   ESHGHI, K.
   A framework for analyzing and improving content-based chunking algorithms.
   Tech. Rep. HPL-2005-30(R.1), Hewlett Packard Laboratories, Palo Alto, 2005. 

s3
 - handle gracefully location related requests
 - logging control (?)
 - parse date/time better
 - upload using post
 - torrent
 - handle gracefully PUT/GET requestPayment
