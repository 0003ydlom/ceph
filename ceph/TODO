

- recall messages
- state diagram for master?  _eval() functions

/- lock states
/ - discover needs to set initial state intelligently
/ - expire must remove from gather_set
    - more gracefully than it does now?




CLIENT
- structure.. multithreaded until messenger

- client sync

- openwr, softasync

- unlink vs soft/hard locks?

MDS
- qsync
- lock modes (sync, async)
 - recalls

- freeze interaction.....  test!
  - freeze state diagram?

- add client file handles.
  - fh modes:  RD, RDWR, WR ... append?  :/
  - fh states: SYNC, ASYNC, ...????

- unlink in terms of dentry lock

- symlinks!
  - stored in the inode.. how?
  - make MDStore.cc smartr
  - consolidate inode.isdir and inode.type?


=> grep for FIXME :)


BUGS?
- proper state diagram for sync, presync, etc. on REPLICAS, and relationshipo to client access?


ISSUES

/- group inode, dir expires in trim().

- discover
 - soft: authority selectively repicates, or sets a 'forward' flag in reply
 - hard: authority always replicates (eg. discover for export)
 - forward flag (see soft)
 - error flag   (if file not found, etc.)
 - [what was i talking about?] make sure waiters are properly triggered, either upon dir_rep update, or (empty!) discover reply



- is lock > freeze a bad plan?  what happens when we need to lock multiple spots
  in the hierarchy.. will that cause deadlock?

- log
  - overall logging strategy.  
    - currently (?): do everything immediately, reply when logged.
  - the log grows indefinitely



FIX
- soft and hard metadata should be fully/more independent?
  - hard lock (owner/mode) is relative to namespace
  - soft sync (mtime/size) is relative to inode (even when dangling)


CLEANUP
- client

- waiters after export... fix will_fail, will_delegate nonsense
 - should a subset of these waiters be triggered immediately after
   export, since discover-based contexts will just be forwarded to the
   new auth?


DOCUMENT
- cache, distributed cache structure and invariants
- export process
- hash/unhash process


TEST
- hashing
 - test hash/unhash operation
 - hash+export: encode list of replicated dir inodes so they can be discovered before import is procesed.
 - test nauthitems (wrt hashing?)


IMPLEMENT

- rmdir
- mkdir
- rename
- truncate

- hash + unhash!

- dir sync
 - stat of a dir should return dir size????
 - readdir of hashed dir

- softasync mode

- log MDS actions
  - imports/exports
  - hash/unhash

- smarter balancing
  - popularity calculation and management is inconsistent/wrong.
  - does it work?

- instrumentation!
- dump active config in run output somewhere

- anchors
- hard links
