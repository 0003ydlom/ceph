notes and todos.

HARD LINKS

- discover_ino
 - called by path_traverse 
- clean up inode file concept, #define's, etc.
- unlink
  - migrate to inode file
- reclaim from inode file on discover...


/- link
 discover 
 xlock
 if local
   anchor
 else
   anchor request to auth
 create remote link, mark dirty

- unlink (primary)
nlink--
move inode into inode file

- unlink (remote)
discover
if local
  nlink--; 
  remove anchor if nlink==1
else
  nlinkreq
remove link

- fix rename


- scatter/gather parallel rendrecv (for client file i/o)
- client buffered writes


MDS TODO
- statfs?
- sync clients on stat
  - will need to ditch 10s client metadata caching before this is useful
  - truncate
- hard links
- rewrite journal + recovery
- figure out online failure recovery
- implement hashed directories
- most distributed fh management?
- btree directories (for efficient large directories)
- consistency points/snapshots

OSD TODO
- heartbeat
- collaborative write replication/commit protocol
- collections
- osd failure recovery
- osd cluster expansion

CLIENT TODO
- finish basic metadata cache (remove items...)
- block i/o on missing caps
- buffer cache
- strong consistency
  - get short-term leases from MDS (for stat etc)
- ditch FUSE for ____



- fix MExportAck and others to use dir+dentry, not inode
  (otherwise this all breaks with hard links.. altho it probably needs reworking already?)


why qsync could be wrong: varying mds -> client message transit or processing times.
- mds -> 1,2 : qsync
- client1 writes at byte 100
- client1 -> mds : qsync reply (size=100)
- client1 writes at byte 300
- client1 -> client2 (outside channel)
- client2 writes at byte 200
- client2 -> mds : qsync reply (size=200)
-> stat results in size 200, even though at no single point in time was the max size 500.
-> for correct result, need to _stop_ client writers while gathering metadata.


SAGE:

- figure out threading, locking stuff in client

- global sync (to be used by shutdown)
  - flush all dirty data to disk
  - flush logs/journals

- scatter/gather parallel sendrecv (for client file i/o)?
  - use Filer, Cond's
- prefetch?

- sync clients on stat
  - truncate

- readdir
 - set up waiters for pending xlocks

fully document export process
 - including the whole warning business.. wtf is that about again?

- string table?

- hard links
 - fix MExportAck and others to use dir+dentry, not inode
   (otherwise this all breaks with hard links.. altho it probably needs reworking already!)

- do real permission checks?

- journal entries, recovery system


CLIENT TODO

- statfs
- readdir content only optionally includes valid inode info
- pay attention to file_caps on read, write
  - block on lacking caps



FILE STUFF (old)

- send all file writers to auth
  - migrate open file ppl w/ export
  - simplify replica softlock craziness!

- locks versus import.. big mess!
  - consider active reader+writer on auth at time of export.  how to relax?
  - relaxation in general is tricky..
  - assimilating auth state on importer also tricky.  gather_set weirdness.

- half-assed async for file writers
 - auth needs to know about replicas with writers...
   - opens go to auth
   - auth has set of replica_writers
   - on close, replica tells auth
- replace replica_writers open/close bit will full-blown soft_start/soft_finish hooks?
- need to sync or qsync clients!

- import port soft writer on dir mtime/size...

- recall messages?
- lazy flag?  make a table!
- state diagram for master?  _eval() functions?


- think about softlock.mode versus shutdown
- qsync

- freeze interaction.....  test!
  - freeze state diagram?




ISSUES


- discover
 - soft: authority selectively repicates, or sets a 'forward' flag in reply
 - hard: authority always replicates (eg. discover for export)
 - forward flag (see soft)
 - error flag   (if file not found, etc.)
 - [what was i talking about?] make sure waiters are properly triggered, either upon dir_rep update, or (empty!) discover reply



CLEANUP
- waiters after export... fix will_fail, will_delegate nonsense
 - should a subset of these waiters be triggered immediately after
   export, since discover-based contexts will just be forwarded to the
   new auth?


DOCUMENT
- cache, distributed cache structure and invariants
- export process
- hash/unhash process


TEST
- hashing
 - test hash/unhash operation
 - hash+export: encode list of replicated dir inodes so they can be discovered before import is procesed.
 - test nauthitems (wrt hashing?)


IMPLEMENT

- truncate

- hash + unhash!

- dir sync
 - stat of a dir should return dir mtime?
 - readdir of hashed dir


- smarter balancing
  - popularity calculation and management is inconsistent/wrong.
  - does it work?

- instrumentation!
- dump active config in run output somewhere

- anchors
- hard links
